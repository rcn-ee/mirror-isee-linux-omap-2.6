/*
 * am335x-igep-igep0034-lite.dtsi - Device Tree file for IGEP0034 Lite
 * MODULE based on AM3352
 *
 * Copyright (C) 2016 ISEE 2007 SL - http://www.isee.biz
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */

#include "am33xx.dtsi"
#include <dt-bindings/interrupt-controller/irq.h>

/ {
	cpus {
		cpu@0 {
			cpu0-supply = <&vdd1_reg>;
		};
	};

	memory {
		device_type = "memory";
		reg = <0x80000000 0x10000000>; /* 256 MB */
	};

	leds {
		pinctrl-names = "default", "sleep";
		pinctrl-0 = <&leds_pins_default>;
		pinctrl-1 = <&leds_pins_sleep>;
		compatible = "gpio-leds";

		led@0 {
			label = "com:red:user";
			gpios = <&gpio0 26 GPIO_ACTIVE_HIGH>;
			default-state = "off";
		};

		led@1 {
			label = "com:green:user";
			gpios = <&gpio0 27 GPIO_ACTIVE_HIGH>;
			default-state = "on";
		};
	};

	vbat: fixedregulator@0 {
		compatible = "regulator-fixed";
		regulator-name = "vbat";
		regulator-min-microvolt = <5000000>;
		regulator-max-microvolt = <5000000>;
		regulator-boot-on;
	};

	vmmc: fixedregulator@1 {
		compatible = "regulator-fixed";
		regulator-name = "vmmc";
		regulator-min-microvolt = <3300000>;
		regulator-max-microvolt = <3300000>;
	};

	wlan_en_reg: fixedregulator@2 {
		compatible = "regulator-fixed";
		regulator-name = "wlan-en-regulator";
		regulator-min-microvolt = <1800000>;
		regulator-max-microvolt = <1800000>;

		/* WL_EN */
		gpio = <&gpio0 20 0>;

		/* WLAN card specific delay */
		startup-delay-us = <70000>;
		enable-active-high;
	};

	kim {
		compatible = "kim";
		nshutdown_gpio = <60>; /* Bank1, pin28 */
		dev_name = "/dev/ttyO2";
		flow_cntrl = <1>;
		baud_rate = <3000000>;
	};

	btwilink {
		compatible = "btwilink";
	};

	panel {
		compatible = "ti,tilcdc,panel";
		pinctrl-names = "default", "sleep";
		pinctrl-0 = <&lcd_pins_default>;
		pinctrl-1 = <&lcd_pins_sleep>;
	};
};

&am33xx_pinmux {
	i2c1_pins: pinmux_i2c1_pins {
		pinctrl-single,pins = <
			AM33XX_IOPAD(0x980, PIN_INPUT_PULLUP | MUX_MODE3)	/* uart1_rxd.I2C1_SDA */
			AM33XX_IOPAD(0x984, PIN_INPUT_PULLUP | MUX_MODE3)	/* uart1_txd.I2C1_SCL */
		>;
	};

	i2c2_pins: pinmux_i2c2_pins {
		pinctrl-single,pins = <
			AM33XX_IOPAD(0x978, PIN_INPUT_PULLUP | MUX_MODE3)	/* uart1_ctsn.I2C2_SDA */
			AM33XX_IOPAD(0x97C, PIN_INPUT_PULLUP | MUX_MODE3)	/* uart1_rtsn.I2C2_SCL */
		>;
	};

	leds_pins_default: pinmux_leds_pins_default {
		pinctrl-single,pins = <
			AM33XX_IOPAD(0x828, PIN_OUTPUT_PULLUP | MUX_MODE7)		/* gpmc_ad10.gpio0[26] */
			AM33XX_IOPAD(0x82C, PIN_OUTPUT_PULLDOWN | MUX_MODE7)	/* gpmc_ad11.gpio0[27] */
		>;
	};

	leds_pins_sleep: pinmux_leds_pins_sleep {
		pinctrl-single,pins = <
			AM33XX_IOPAD(0x828, PIN_INPUT_PULLDOWN | MUX_MODE7)		/* gpmc_ad10.gpio0[26] */
			AM33XX_IOPAD(0x82C, PIN_INPUT_PULLDOWN | MUX_MODE7)	/* gpmc_ad11.gpio0[27] */
		>;
	};

	mmc1_pins_default: pinmux_mmc1_pins_default {
		pinctrl-single,pins = <
			AM33XX_IOPAD(0x8F0, PIN_INPUT_PULLUP | MUX_MODE0)	/* mmc0_dat3.mmc0_dat3 */
			AM33XX_IOPAD(0x8F4, PIN_INPUT_PULLUP | MUX_MODE0)	/* mmc0_dat2.mmc0_dat2 */
			AM33XX_IOPAD(0x8F8, PIN_INPUT_PULLUP | MUX_MODE0)	/* mmc0_dat1.mmc0_dat1 */
			AM33XX_IOPAD(0x8FC, PIN_INPUT_PULLUP | MUX_MODE0)	/* mmc0_dat0.mmc0_dat0 */
			AM33XX_IOPAD(0x900, PIN_INPUT_PULLUP | MUX_MODE0)	/* mmc0_clk.mmc0_clk */
			AM33XX_IOPAD(0x904, PIN_INPUT_PULLUP | MUX_MODE0)	/* mmc0_cmd.mmc0_cmd */
			AM33XX_IOPAD(0x960, PIN_INPUT | MUX_MODE7)			/* spi0_cs1.gpio0_6 */
		>;
	};

	mmc1_pins_sleep: pinmux_mmc1_pins_sleep {
		pinctrl-single,pins = <
			AM33XX_IOPAD(0x8F0, PIN_INPUT_PULLDOWN | MUX_MODE7)
			AM33XX_IOPAD(0x8F4, PIN_INPUT_PULLDOWN | MUX_MODE7)
			AM33XX_IOPAD(0x8F8, PIN_INPUT_PULLDOWN | MUX_MODE7)
			AM33XX_IOPAD(0x8FC, PIN_INPUT_PULLDOWN | MUX_MODE7)
			AM33XX_IOPAD(0x900, PIN_INPUT_PULLDOWN | MUX_MODE7)
			AM33XX_IOPAD(0x904, PIN_INPUT_PULLDOWN | MUX_MODE7)
			AM33XX_IOPAD(0x960, PIN_INPUT_PULLDOWN | MUX_MODE7)
		>;
	};

	mmc3_pins_default: pinmux_mmc3_pins_default {
		pinctrl-single,pins = <
			AM33XX_IOPAD(0x83C, PIN_INPUT_PULLUP | MUX_MODE3)	/* gpmc_ad15.mmc2_dat3 */
			AM33XX_IOPAD(0x838, PIN_INPUT_PULLUP | MUX_MODE3)	/* gpmc_ad14.mmc2_dat2 */
			AM33XX_IOPAD(0x834, PIN_INPUT_PULLUP | MUX_MODE3)	/* gpmc_ad13.mmc2_dat1 */
			AM33XX_IOPAD(0x830, PIN_INPUT_PULLUP | MUX_MODE3)	/* gpmc_ad12.mmc2_dat0 */
			AM33XX_IOPAD(0x88C, PIN_INPUT_PULLUP | MUX_MODE3)	/* gpmc_clk.mmc2_clk */
			AM33XX_IOPAD(0x888, PIN_INPUT_PULLUP | MUX_MODE3)	/* gpmc_csn3.mmc2_cmd */
		>;
	};

	mmc3_pins_sleep: pinmux_mmc3_pins_sleep {
		pinctrl-single,pins = <
			AM33XX_IOPAD(0x83C, PIN_INPUT_PULLUP | MUX_MODE7)
			AM33XX_IOPAD(0x838, PIN_INPUT_PULLUP | MUX_MODE7)
			AM33XX_IOPAD(0x834, PIN_INPUT_PULLUP | MUX_MODE7)
			AM33XX_IOPAD(0x830, PIN_INPUT_PULLUP | MUX_MODE7)
			AM33XX_IOPAD(0x88C, PIN_INPUT_PULLUP | MUX_MODE7)
			AM33XX_IOPAD(0x888, PIN_INPUT_PULLUP | MUX_MODE7)
		>;
	};

	wlan_pins: pinmux_wlan_pins {
		pinctrl-single,pins = <
			AM33XX_IOPAD(0x9B4, PIN_OUTPUT_PULLDOWN | MUX_MODE7)	/* gpio0_20 WL_EN */
			AM33XX_IOPAD(0x9B0, PIN_INPUT_PULLUP | MUX_MODE7)		/* gpio0_19 WL_IRQ */
			AM33XX_IOPAD(0x878, PIN_OUTPUT_PULLDOWN | MUX_MODE7)	/* gpio1_28 BT_EN */
		>;
	};

	nandflash_pins_default: pinmux_nandflash_pins_default {
		pinctrl-single,pins = <
			AM33XX_IOPAD(0x800, PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad0.gpmc_ad0 */
			AM33XX_IOPAD(0x804, PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad1.gpmc_ad1 */
			AM33XX_IOPAD(0x808, PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad2.gpmc_ad2 */
			AM33XX_IOPAD(0x80C, PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad3.gpmc_ad3 */
			AM33XX_IOPAD(0x810, PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad4.gpmc_ad4 */
			AM33XX_IOPAD(0x814, PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad5.gpmc_ad5 */
			AM33XX_IOPAD(0x818, PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad6.gpmc_ad6 */
			AM33XX_IOPAD(0x81C, PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad7.gpmc_ad7 */
			AM33XX_IOPAD(0x870, PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_wait0.gpmc_wait0 */
			AM33XX_IOPAD(0x874, PIN_INPUT_PULLUP | MUX_MODE7)	/* gpmc_wpn.gpio0_30 */
			AM33XX_IOPAD(0x87C, PIN_OUTPUT | MUX_MODE0)			/* gpmc_csn0.gpmc_csn0 */
			AM33XX_IOPAD(0x890, PIN_OUTPUT | MUX_MODE0)			/* gpmc_advn_ale.gpmc_advn_ale */
			AM33XX_IOPAD(0x894, PIN_OUTPUT | MUX_MODE0)			/* gpmc_oen_ren.gpmc_oen_ren */
			AM33XX_IOPAD(0x898, PIN_OUTPUT | MUX_MODE0)			/* gpmc_wen.gpmc_wen */
			AM33XX_IOPAD(0x89C, PIN_OUTPUT | MUX_MODE0)			/* gpmc_be0n_cle.gpmc_be0n_cle */
		>;
	};

	nandflash_pins_sleep: pinmux_nandflash_pins_sleep {
		pinctrl-single,pins = <
			AM33XX_IOPAD(0x800, PIN_INPUT_PULLDOWN | MUX_MODE7)
			AM33XX_IOPAD(0x804, PIN_INPUT_PULLDOWN | MUX_MODE7)
			AM33XX_IOPAD(0x808, PIN_INPUT_PULLDOWN | MUX_MODE7)
			AM33XX_IOPAD(0x80C, PIN_INPUT_PULLDOWN | MUX_MODE7)
			AM33XX_IOPAD(0x810, PIN_INPUT_PULLDOWN | MUX_MODE7)
			AM33XX_IOPAD(0x814, PIN_INPUT_PULLDOWN | MUX_MODE7)
			AM33XX_IOPAD(0x818, PIN_INPUT_PULLDOWN | MUX_MODE7)
			AM33XX_IOPAD(0x81C, PIN_INPUT_PULLDOWN | MUX_MODE7)
			AM33XX_IOPAD(0x870, PIN_INPUT_PULLDOWN | MUX_MODE7)
			AM33XX_IOPAD(0x874, PIN_INPUT_PULLDOWN | MUX_MODE7)
			AM33XX_IOPAD(0x87C, PIN_INPUT_PULLDOWN | MUX_MODE7)
			AM33XX_IOPAD(0x890, PIN_INPUT_PULLDOWN | MUX_MODE7)
			AM33XX_IOPAD(0x894, PIN_INPUT_PULLDOWN | MUX_MODE7)
			AM33XX_IOPAD(0x898, PIN_INPUT_PULLDOWN | MUX_MODE7)
			AM33XX_IOPAD(0x89C, PIN_INPUT_PULLDOWN | MUX_MODE7)
		>;
	};

	uart0_pins: pinmux_uart0_pins {
		pinctrl-single,pins = <
			AM33XX_IOPAD(0x970, PIN_INPUT_PULLUP | MUX_MODE0)		/* uart0_rxd.uart0_rxd */
			AM33XX_IOPAD(0x974, PIN_OUTPUT_PULLDOWN | MUX_MODE0)	/* uart0_txd.uart0_txd */
		>;
	};

	uart2_pins_default: pinmux_uart2_pins_default {
		pinctrl-single,pins = <
			AM33XX_IOPAD(0x988, PIN_INPUT | MUX_MODE2)				/* I2C0_SDA.uart2_ctsn */
			AM33XX_IOPAD(0x98C, PIN_OUTPUT_PULLDOWN | MUX_MODE2)	/* I2C0_SCL.uart2_rtsn */
			AM33XX_IOPAD(0x92C, PIN_INPUT_PULLUP | MUX_MODE1)		/* gmii1_txclk.uart2_rxd */
			AM33XX_IOPAD(0x930, PIN_OUTPUT | MUX_MODE1)				/* gmii1_rxclk.uart2_txd */
		>;
	};

	uart2_pins_sleep: pinmux_uart2_pins_sleep {
		pinctrl-single,pins = <
			AM33XX_IOPAD(0x988, PIN_INPUT_PULLDOWN | MUX_MODE7)
			AM33XX_IOPAD(0x98C, PIN_INPUT_PULLDOWN | MUX_MODE7)
			AM33XX_IOPAD(0x92C, PIN_INPUT_PULLDOWN | MUX_MODE7)
			AM33XX_IOPAD(0x930, PIN_INPUT_PULLDOWN | MUX_MODE7)
		>;
	};

	cpsw_default: pinmux_cpsw_default {
		pinctrl-single,pins = <
			/* Slave 1: eth0 device*/
			AM33XX_IOPAD(0x90C, PIN_INPUT_PULLDOWN | MUX_MODE1)	/* gmii1_crs.rmii1_crs_dv */
			AM33XX_IOPAD(0x910, PIN_INPUT_PULLUP | MUX_MODE1)	/* gmii1_rxer.rmii1_rxer */
			AM33XX_IOPAD(0x914, PIN_OUTPUT_PULLDOWN | MUX_MODE1)	/* gmii1_txen.rmii1_txen */
			AM33XX_IOPAD(0x928, PIN_OUTPUT_PULLDOWN | MUX_MODE1)	/* gmii1_txd0.rmii1_txd0 */
			AM33XX_IOPAD(0x924, PIN_OUTPUT_PULLDOWN | MUX_MODE1)	/* gmii1_txd1.rmii1_txd1 */
			AM33XX_IOPAD(0x940, PIN_INPUT_PULLUP | MUX_MODE1)	/* gmii1_rxd0.rmii1_rxd0 */
			AM33XX_IOPAD(0x93C, PIN_INPUT_PULLUP | MUX_MODE1)	/* gmii1_rxd1.rmii1_rxd1 */
			AM33XX_IOPAD(0x944, PIN_INPUT_PULLDOWN | MUX_MODE0)	/* rmii1_refclk.rmii1_refclk */
		>;
	};

	cpsw_sleep: pinmux_cpsw_sleep {
		pinctrl-single,pins = <
			/* Slave 1: eth0 device*/
			AM33XX_IOPAD(0x90C, PIN_INPUT_PULLDOWN | MUX_MODE7)
			AM33XX_IOPAD(0x910, PIN_INPUT_PULLDOWN | MUX_MODE7)
			AM33XX_IOPAD(0x914, PIN_INPUT_PULLDOWN | MUX_MODE7)
			AM33XX_IOPAD(0x928, PIN_INPUT_PULLDOWN | MUX_MODE7)
			AM33XX_IOPAD(0x924, PIN_INPUT_PULLDOWN | MUX_MODE7)
			AM33XX_IOPAD(0x940, PIN_INPUT_PULLDOWN | MUX_MODE7)
			AM33XX_IOPAD(0x93C, PIN_INPUT_PULLDOWN | MUX_MODE7)
			AM33XX_IOPAD(0x944, PIN_INPUT_PULLDOWN | MUX_MODE7)
		>;
	};

	davinci_mdio_default: pinmux_davinci_mdio_default {
		pinctrl-single,pins = <
			AM33XX_IOPAD(0x948, PIN_INPUT_PULLUP | SLEWCTRL_FAST | MUX_MODE0)	/* mdio_data.mdio_data */
			AM33XX_IOPAD(0x94C, PIN_OUTPUT_PULLUP | MUX_MODE0)					/* mdio_clk.mdio_clk */
		>;
	};

	davinci_mdio_sleep: pinmux_davinci_mdio_sleep {
		pinctrl-single,pins = <
			AM33XX_IOPAD(0x948, PIN_INPUT_PULLDOWN | MUX_MODE7)
			AM33XX_IOPAD(0x94C, PIN_INPUT_PULLDOWN | MUX_MODE7)
		>;
	};

	mcasp0_pins_default: pinmux_mcasp0_pins_default {
		pinctrl-single,pins = <
			AM33XX_IOPAD(0x990, PIN_INPUT_PULLDOWN | MUX_MODE0)	/* mcasp0_aclkx.mcasp0_aclkx */
			AM33XX_IOPAD(0x994, PIN_INPUT_PULLDOWN | MUX_MODE0)	/* mcasp0_fsx.mcasp0_fsx */
			AM33XX_IOPAD(0x998, PIN_OUTPUT_PULLDOWN | MUX_MODE0)/* mcasp0_axr0.mcasp0_axr0 */
			AM33XX_IOPAD(0x9A8, PIN_INPUT_PULLDOWN | MUX_MODE0)	/* mcasp0_axr1.mcasp0_axr1 */
		>;
	};

	mcasp0_pins_sleep: pinmux_mcasp0_pins_sleep {
		pinctrl-single,pins = <
			AM33XX_IOPAD(0x990, PIN_INPUT_PULLDOWN | MUX_MODE0)
			AM33XX_IOPAD(0x994, PIN_INPUT_PULLDOWN | MUX_MODE0)
			AM33XX_IOPAD(0x998, PIN_INPUT_PULLDOWN | MUX_MODE0)
			AM33XX_IOPAD(0x9A8, PIN_INPUT_PULLDOWN | MUX_MODE0)
		>;
	};

	lcd_pins_default: pinmux_lcd_pins_default {
		pinctrl-single,pins = <
			AM33XX_IOPAD(0x8a0, PIN_OUTPUT | MUX_MODE0)				/* lcd_data0.lcd_data0 */
			AM33XX_IOPAD(0x8a4, PIN_OUTPUT | MUX_MODE0)				/* lcd_data1.lcd_data1 */
			AM33XX_IOPAD(0x8a8, PIN_OUTPUT | MUX_MODE0)				/* lcd_data2.lcd_data2 */
			AM33XX_IOPAD(0x8ac, PIN_OUTPUT | MUX_MODE0)				/* lcd_data3.lcd_data3 */
			AM33XX_IOPAD(0x8b0, PIN_OUTPUT | MUX_MODE0)				/* lcd_data4.lcd_data4 */
			AM33XX_IOPAD(0x8b4, PIN_OUTPUT | MUX_MODE0)				/* lcd_data5.lcd_data5 */
			AM33XX_IOPAD(0x8b8, PIN_OUTPUT | MUX_MODE0)				/* lcd_data6.lcd_data6 */
			AM33XX_IOPAD(0x8bc, PIN_OUTPUT | MUX_MODE0)				/* lcd_data7.lcd_data7 */
			AM33XX_IOPAD(0x8c0, PIN_OUTPUT | MUX_MODE0)				/* lcd_data8.lcd_data8 */
			AM33XX_IOPAD(0x8c4, PIN_OUTPUT | MUX_MODE0)				/* lcd_data9.lcd_data9 */
			AM33XX_IOPAD(0x8c8, PIN_OUTPUT | MUX_MODE0)				/* lcd_data10.lcd_data10 */
			AM33XX_IOPAD(0x8cc, PIN_OUTPUT | MUX_MODE0)				/* lcd_data11.lcd_data11 */
			AM33XX_IOPAD(0x8d0, PIN_OUTPUT | MUX_MODE0)				/* lcd_data12.lcd_data12 */
			AM33XX_IOPAD(0x8d4, PIN_OUTPUT | MUX_MODE0)				/* lcd_data13.lcd_data13 */
			AM33XX_IOPAD(0x8d8, PIN_OUTPUT | MUX_MODE0)				/* lcd_data14.lcd_data14 */
			AM33XX_IOPAD(0x8dc, PIN_OUTPUT | MUX_MODE0)				/* lcd_data15.lcd_data15 */
			AM33XX_IOPAD(0x8e0, PIN_OUTPUT_PULLDOWN | MUX_MODE0)	/* lcd_vsync.lcd_vsync */
			AM33XX_IOPAD(0x8e4, PIN_OUTPUT_PULLDOWN | MUX_MODE0)	/* lcd_hsync.lcd_hsync */
			AM33XX_IOPAD(0x8e8, PIN_OUTPUT_PULLDOWN | MUX_MODE0)	/* lcd_pclk.lcd_pclk */
			AM33XX_IOPAD(0x8ec, PIN_OUTPUT_PULLDOWN | MUX_MODE0)	/* lcd_ac_bias_en.lcd_ac_bias_en */
		>;
	};

	lcd_pins_sleep: pinmux_lcd_pins_sleep {
		pinctrl-single,pins = <
			AM33XX_IOPAD(0x8a0, PIN_INPUT | MUX_MODE7)
			AM33XX_IOPAD(0x8a4, PIN_INPUT | MUX_MODE7)
			AM33XX_IOPAD(0x8a8, PIN_INPUT | MUX_MODE7)
			AM33XX_IOPAD(0x8ac, PIN_INPUT | MUX_MODE7)
			AM33XX_IOPAD(0x8b0, PIN_INPUT | MUX_MODE7)
			AM33XX_IOPAD(0x8b4, PIN_INPUT | MUX_MODE7)
			AM33XX_IOPAD(0x8b8, PIN_INPUT | MUX_MODE7)
			AM33XX_IOPAD(0x8bc, PIN_INPUT | MUX_MODE7)
			AM33XX_IOPAD(0x8c0, PIN_INPUT | MUX_MODE7)
			AM33XX_IOPAD(0x8c4, PIN_INPUT | MUX_MODE7)
			AM33XX_IOPAD(0x8c8, PIN_INPUT | MUX_MODE7)
			AM33XX_IOPAD(0x8cc, PIN_INPUT | MUX_MODE7)
			AM33XX_IOPAD(0x8d0, PIN_INPUT | MUX_MODE7)
			AM33XX_IOPAD(0x8d4, PIN_INPUT | MUX_MODE7)
			AM33XX_IOPAD(0x8d8, PIN_INPUT | MUX_MODE7)
			AM33XX_IOPAD(0x8dc, PIN_INPUT | MUX_MODE7)
			AM33XX_IOPAD(0x8e0, PIN_INPUT_PULLDOWN | MUX_MODE7)
			AM33XX_IOPAD(0x8e4, PIN_INPUT_PULLDOWN | MUX_MODE7)
			AM33XX_IOPAD(0x8e8, PIN_INPUT_PULLDOWN | MUX_MODE7)
			AM33XX_IOPAD(0x8ec, PIN_INPUT_PULLDOWN | MUX_MODE7)
		>;
	};
};

&i2c1 {
	status = "okay";
	pinctrl-names = "default";
	pinctrl-0 = <&i2c1_pins>;

	clock-frequency = <400000>;

	tps: tps@2d {
		reg = <0x2d>;
	};

	eeprom: eeprom@50 {
		compatible = "at,24c256";
		reg = <0x50>;
	};
};

&i2c2 {
	status = "okay";
	pinctrl-names = "default";
	pinctrl-0 = <&i2c2_pins>;

	clock-frequency = <400000>;
};

&mmc1 {
	status = "okay";
	vmmc-supply = <&vmmc>;
	bus-width = <4>;
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&mmc1_pins_default>;
	pinctrl-1 = <&mmc1_pins_sleep>;
	cd-gpios = <&gpio0 6 GPIO_ACTIVE_HIGH>;
};

&edma {
	/* Map eDMA MMC2 Events from Crossbar */
	ti,edma-xbar-event-map = /bits/ 16 <1 12
                                            2 13>;
};

&mmc3 {
	status = "okay";
	dmas = <&edma 12
		&edma 13>;
	dma-names = "tx", "rx";
	vmmc-supply = <&wlan_en_reg>;
	bus-width = <4>;
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&mmc3_pins_default &wlan_pins>;
	pinctrl-1 = <&mmc3_pins_sleep &wlan_pins>;
	ti,non-removable;
	ti,needs-special-hs-handling;
	cap-power-off-card;
	keep-power-in-suspend;

	#address-cells = <1>;
	#size-cells = <0>;
	wlcore: wlcore@0 {
		compatible = "ti,wl1835";
		reg = <2>;
		interrupt-parent = <&gpio0>;
		interrupts = <19 IRQ_TYPE_LEVEL_HIGH>;
	};
};

&elm {
	status = "okay";
};

&gpmc {
	status = "okay";
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&nandflash_pins_default>;
	pinctrl-1 = <&nandflash_pins_sleep>;

	ranges = <0 0 0x08000000 0x08000000>;	/* CS0: 128 MB for NAND */

	nand@0,0 {
		compatible = "ti,omap2-nand";
		reg = <0 0 4>; /* CS0, offset 0, IO size 4 */
		interrupt-parent = <&intc>;
		interrupts = <100>;
		ready-gpio = <&gpmc 0 GPIO_ACTIVE_HIGH>; /* gpmc_wait0 */
		nand-bus-width = <8>;
		ti,nand-ecc-opt = "bch8";
		ti,elm-id = <&elm>;

		gpmc,device-width = <1>;
		gpmc,sync-clk-ps = <0>;
		gpmc,cs-on-ns = <0>;
		gpmc,cs-rd-off-ns = <44>;
		gpmc,cs-wr-off-ns = <44>;
		gpmc,adv-on-ns = <6>;
		gpmc,adv-rd-off-ns = <34>;
		gpmc,adv-wr-off-ns = <44>;
		gpmc,we-on-ns = <0>;
		gpmc,we-off-ns = <40>;
		gpmc,oe-on-ns = <0>;
		gpmc,oe-off-ns = <54>;
		gpmc,access-ns = <64>;
		gpmc,rd-cycle-ns = <82>;
		gpmc,wr-cycle-ns = <82>;
		gpmc,bus-turnaround-ns = <0>;
		gpmc,cycle2cycle-delay-ns = <0>;
		gpmc,clk-activation-ns = <0>;
		gpmc,wr-access-ns = <40>;
		gpmc,wr-data-mux-bus-ns = <0>;

		#address-cells = <1>;
		#size-cells = <1>;
		elm_id = <&elm>;

		/* MTD partition table */
		partition@0 {
			label = "SPL";
			reg = <0x00000000 0x00080000>;
		};

		partition@1 {
			label = "U-boot";
			reg = <0x00080000 0x00100000>;
		};

		partition@2 {
			label = "U-Boot Env";
			reg = <0x00180000 0x00020000>;
		};

		partition@3 {
			label = "FileSystem";
			reg = <0x001A0000 0x07E60000>;
		};
	};
};

&uart0 {
	status = "okay";
	pinctrl-names = "default";
	pinctrl-0 = <&uart0_pins>;
};

&uart2 {
	status = "okay";
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&uart2_pins_default>;
	pinctrl-1 = <&uart2_pins_sleep>;
};

&mac {
	status = "okay";
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&cpsw_default>;
	pinctrl-1 = <&cpsw_sleep>;
};

&davinci_mdio {
	status = "okay";
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&davinci_mdio_default>;
	pinctrl-1 = <&davinci_mdio_sleep>;
};

&cpsw_emac0 {
	phy_id = <&davinci_mdio>, <1>;
	phy-mode = "rmii";
};

&phy_sel {
	rmii-clock-ext;
};

&mcasp0 {
	status = "okay";
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&mcasp0_pins_default>;
	pinctrl-1 = <&mcasp0_pins_sleep>;
};

&usb {
	status = "okay";
};

&usb0 {
	status = "okay";
	dr_mode = "otg";
};

&usb1 {
	status = "okay";
	dr_mode = "host";
};

&usb_ctrl_mod {
	status = "okay";
};

&usb0_phy {
	status = "okay";
};

&usb1_phy {
	status = "okay";
};

&cppi41dma {
	status = "okay";
};

#include "tps65910.dtsi"

&tps {
	interrupts = <7>; /* SYS_NIRQ cascaded to intc */
	interrupt-parent = <&intc>;
	ti,en-ck32k-xtal;

	vcc1-supply = <&vbat>;
	vcc2-supply = <&vbat>;
	vcc3-supply = <&vbat>;
	vcc4-supply = <&vbat>;
	vcc5-supply = <&vbat>;
	vcc6-supply = <&vbat>;
	vcc7-supply = <&vbat>;
	vccio-supply = <&vbat>;

	rtc1: rtc {
		compatible = "ti,tps65910-rtc";
		interrupts = <7>;
		ti,hwmods = "rtc1";
	};

	regulators {
		vrtc_reg: regulator@0 {
			regulator-always-on;
		};

		vio_reg: regulator@1 {
			regulator-always-on;
		};

		vdd1_reg: regulator@2 {
			/* VDD_MPU voltage limits 0.95V - 1.26V with +/-4% tolerance */
			regulator-name = "vdd_mpu";
			regulator-min-microvolt = <912500>;
			regulator-max-microvolt = <1312500>;
			regulator-boot-on;
			regulator-always-on;
		};

		vdd2_reg: regulator@3 {
			/* VDD_CORE voltage limits 0.95V - 1.1V with +/-4% tolerance */
			regulator-name = "vdd_core";
			regulator-min-microvolt = <912500>;
			regulator-max-microvolt = <1150000>;
			regulator-boot-on;
			regulator-always-on;
		};

		vdd3_reg: regulator@4 {
			regulator-always-on;
		};

		vdig1_reg: regulator@5 {
			regulator-always-on;
		};

		vdig2_reg: regulator@6 {
			regulator-always-on;
		};

		vpll_reg: regulator@7 {
			regulator-always-on;
		};

		vdac_reg: regulator@8 {
			regulator-always-on;
		};

		vaux1_reg: regulator@9 {
			regulator-always-on;
		};

		vaux2_reg: regulator@10 {
			regulator-always-on;
		};

		vaux33_reg: regulator@11 {
			regulator-always-on;
		};

		vmmc_reg: regulator@12 {
			regulator-always-on;
		};

		vbb_reg: regulator@13 {
			regulator-min-microvolt = <3150000>;
			regulator-max-microvolt = <3150000>;
			regulator-boot-on;
			regulator-always-on;
		};
	};
};

&rtc {
	compatible = "ti,am3352-rtc";
	ext-clk-src;
};

&tscadc {
	status = "okay";

	adc {
		ti,adc-channels = <0 1 2 3 4 5 6 7>;
	};
};

&lcdc {
	status = "okay";
};

&aes {
	status = "okay";
};

&sham {
	status = "okay";
};
